package leetcode23;
/*
 * Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
 * another function http://blog.sina.com.cn/s/blog_b9285de20101hg43.html
 */
import leetcode2.ListNode;

public class code23 {
	public ListNode mergeKLists(ListNode[] lists) {
		if(lists.length<=0) return null;
		int size = lists.length;
        while(size!=1){
        	boolean flag=true;
        	if(size%2==0)
        		flag=false;
        	int i=0;
        	for(;i<size/2;i++){
        		ListNode head = new ListNode(0);
        		ListNode fakehead = head;
        		convert(lists[i*2],lists[i*2+1],fakehead);
        		lists[i] = head.next;
        	}
        	if(flag){
        		lists[i] = lists[size-1];
        		size=size/2+1;
        	}else{
        		size/=2;
        	}
        }
        return lists[0];
    }
	void convert(ListNode list1, ListNode list2, ListNode l3){
		ListNode l1 = list1;
		ListNode l2 = list2;
		while(l1!=null&&l2!=null){
			if(l1.val<l2.val){
				l3.next = l1;
				l1 = l1.next;
			}else{
				l3.next = l2;
				l2 = l2.next;
			}
			l3 = l3.next;
		}
		if(l1==null)
			l3.next = l2;
		if(l2==null)
			l3.next = l1;
	}
}

