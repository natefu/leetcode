package leetcode3;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
/*
 * Given a string, find the length of the longest substring without repeating characters. 
 * For example, the longest substring without repeating letters for "abcabcbb" is "abc", which the length is 3. 
 * For "bbbbb" the longest substring is "b", with the length of 1.
 */


public class code3 {
	public int lengthOfLongestSubstring(String s) {
		if(s.length()==0)
	        return 0;
		List<Integer> savelist = new ArrayList<Integer>();
		int start = 0;
		int end =0;
		for(int i=1;i<s.length();i++){
			char a = s.charAt(i);
			for(int j=start;j<=end;j++){
				if(a == s.charAt(j)){
					savelist.add(end-start);
					start=j+1;
					break;
				}
			}
			end++;
		}
		savelist.add(end-start);
		Iterator it = savelist.iterator();
		int max = 0;
		while(it.hasNext()){
			int tmp = (Integer) it.next();
			if(tmp>max){
				max = tmp;
			}
		}
		return max+1;
    }
}
