package leetcode32;
/*
 * Given a string containing just the characters '(' and ')', 
 * find the length of the longest valid (well-formed) parentheses substring.
 * For "(()", the longest valid parentheses substring is "()", which has length = 2.
 * Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
 */
import java.util.Stack;

public class code32 {
	public int longestValidParentheses(String s) {
        int size = s.length();
        boolean []resultlist = new boolean[size];
        Stack<Integer> st = new Stack<Integer>();
        for(int i=0;i<size;i++){
        	resultlist[i]=false;
        }
        for(int i=0;i<size;i++){
        	if(s.charAt(i)=='(')
        		st.push(i);
        	else{
        		if(!st.empty()){
        			int k = st.pop();
        			resultlist[i]=true;
        			resultlist[k]=true;
        		}
        	}
        }
        int max = 0;
        int count = 0;
        for(int i=0;i<size;i++){
        	if(resultlist[i]){
        		count++;
        		if(count>max)
        			max=count;
        	}else
        		count=0;
        }
        return max;
    }
}
