package leetcode19;
/*
 * Given a linked list, remove the nth node from the end of list and return its head.
 * For example,
 * Given linked list: 1->2->3->4->5, and n = 2.
 * After removing the second node from the end, the linked list becomes 1->2->3->5.
 * Note:
 * Given n will always be valid.
 * Try to do this in one pass.
 */
import leetcode2.ListNode;
public class code19 {
	/**
	 * Definition for singly-linked list.
	 * public class ListNode {
	 *     int val;
	 *     ListNode next;
	 *     ListNode(int x) { val = x; }
	 * }
	 */
	public ListNode removeNthFromEnd(ListNode head, int n) {
		ListNode first = new ListNode(-1);
		first.next = head;
        returnlist(first,n-1);
		return first.next;
    }
	public int returnlist(ListNode head, int n){
		if(head.next!=null){
			n = returnlist(head.next,n);
		}else if(head.next==null){
			n--;
			return n;
		}
		if(n==-1){
			head.next=head.next.next;
			n--;
			return n;
		}if(n==-2){
			return -2;
		}else{
			n--;
			return n;
		}
	}
	
}

